// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SupplierServiceGRPC.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SupplierServiceGRPC {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Greeter
  {
    static readonly string __ServiceName = "SupplierServiceGRPC.Greeter";

    static readonly grpc::Marshaller<global::SupplierServiceGRPC.HelloRequest> __Marshaller_SupplierServiceGRPC_HelloRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SupplierServiceGRPC.HelloRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SupplierServiceGRPC.HelloReply> __Marshaller_SupplierServiceGRPC_HelloReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SupplierServiceGRPC.HelloReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SupplierServiceGRPC.Empty> __Marshaller_SupplierServiceGRPC_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SupplierServiceGRPC.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SupplierServiceGRPC.PreferredSupplier> __Marshaller_SupplierServiceGRPC_PreferredSupplier = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SupplierServiceGRPC.PreferredSupplier.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SupplierServiceGRPC.ProductRequest> __Marshaller_SupplierServiceGRPC_ProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SupplierServiceGRPC.ProductRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::SupplierServiceGRPC.setPreferredSupplierForProductRequest> __Marshaller_SupplierServiceGRPC_setPreferredSupplierForProductRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::SupplierServiceGRPC.setPreferredSupplierForProductRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::SupplierServiceGRPC.HelloRequest, global::SupplierServiceGRPC.HelloReply> __Method_SayHello = new grpc::Method<global::SupplierServiceGRPC.HelloRequest, global::SupplierServiceGRPC.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHello",
        __Marshaller_SupplierServiceGRPC_HelloRequest,
        __Marshaller_SupplierServiceGRPC_HelloReply);

    static readonly grpc::Method<global::SupplierServiceGRPC.HelloRequest, global::SupplierServiceGRPC.HelloReply> __Method_SayHelloAgain = new grpc::Method<global::SupplierServiceGRPC.HelloRequest, global::SupplierServiceGRPC.HelloReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SayHelloAgain",
        __Marshaller_SupplierServiceGRPC_HelloRequest,
        __Marshaller_SupplierServiceGRPC_HelloReply);

    static readonly grpc::Method<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.PreferredSupplier> __Method_FindAllSuppliers = new grpc::Method<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.PreferredSupplier>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FindAllSuppliers",
        __Marshaller_SupplierServiceGRPC_Empty,
        __Marshaller_SupplierServiceGRPC_PreferredSupplier);

    static readonly grpc::Method<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.ProductRequest> __Method_FindAllProducts = new grpc::Method<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.ProductRequest>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FindAllProducts",
        __Marshaller_SupplierServiceGRPC_Empty,
        __Marshaller_SupplierServiceGRPC_ProductRequest);

    static readonly grpc::Method<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.PreferredSupplier> __Method_FindAllPreferredSuppliers = new grpc::Method<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.PreferredSupplier>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "FindAllPreferredSuppliers",
        __Marshaller_SupplierServiceGRPC_Empty,
        __Marshaller_SupplierServiceGRPC_PreferredSupplier);

    static readonly grpc::Method<global::SupplierServiceGRPC.ProductRequest, global::SupplierServiceGRPC.PreferredSupplier> __Method_FindPreferredSupplier = new grpc::Method<global::SupplierServiceGRPC.ProductRequest, global::SupplierServiceGRPC.PreferredSupplier>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindPreferredSupplier",
        __Marshaller_SupplierServiceGRPC_ProductRequest,
        __Marshaller_SupplierServiceGRPC_PreferredSupplier);

    static readonly grpc::Method<global::SupplierServiceGRPC.setPreferredSupplierForProductRequest, global::SupplierServiceGRPC.Empty> __Method_setPreferredSupplierForProduct = new grpc::Method<global::SupplierServiceGRPC.setPreferredSupplierForProductRequest, global::SupplierServiceGRPC.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "setPreferredSupplierForProduct",
        __Marshaller_SupplierServiceGRPC_setPreferredSupplierForProductRequest,
        __Marshaller_SupplierServiceGRPC_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SupplierServiceGRPC.SupplierServiceGRPCReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Greeter</summary>
    public abstract partial class GreeterBase
    {
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SupplierServiceGRPC.HelloReply> SayHello(global::SupplierServiceGRPC.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SupplierServiceGRPC.HelloReply> SayHelloAgain(global::SupplierServiceGRPC.HelloRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Shows all suppliers in store
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FindAllSuppliers(global::SupplierServiceGRPC.Empty request, grpc::IServerStreamWriter<global::SupplierServiceGRPC.PreferredSupplier> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Shows all products in store
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FindAllProducts(global::SupplierServiceGRPC.Empty request, grpc::IServerStreamWriter<global::SupplierServiceGRPC.ProductRequest> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Implementation of LIST(Suppliers) findAllPreferredSuppliers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task FindAllPreferredSuppliers(global::SupplierServiceGRPC.Empty request, grpc::IServerStreamWriter<global::SupplierServiceGRPC.PreferredSupplier> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Implementation of Supplier findPreferredSupplier(Product p)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SupplierServiceGRPC.PreferredSupplier> FindPreferredSupplier(global::SupplierServiceGRPC.ProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Implementation of void setPreferredSupplierForProduct(Supplier s, Product c)
      ///	throws UnknownSupplierException, UnknownProductException
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::SupplierServiceGRPC.Empty> setPreferredSupplierForProduct(global::SupplierServiceGRPC.setPreferredSupplierForProductRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Greeter</summary>
    public partial class GreeterClient : grpc::ClientBase<GreeterClient>
    {
      /// <summary>Creates a new client for Greeter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GreeterClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Greeter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GreeterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GreeterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GreeterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.HelloReply SayHello(global::SupplierServiceGRPC.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHello(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.HelloReply SayHello(global::SupplierServiceGRPC.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.HelloReply> SayHelloAsync(global::SupplierServiceGRPC.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends a greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.HelloReply> SayHelloAsync(global::SupplierServiceGRPC.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHello, null, options, request);
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.HelloReply SayHelloAgain(global::SupplierServiceGRPC.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAgain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.HelloReply SayHelloAgain(global::SupplierServiceGRPC.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SayHelloAgain, null, options, request);
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.HelloReply> SayHelloAgainAsync(global::SupplierServiceGRPC.HelloRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayHelloAgainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends another greeting
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.HelloReply> SayHelloAgainAsync(global::SupplierServiceGRPC.HelloRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SayHelloAgain, null, options, request);
      }
      /// <summary>
      /// Shows all suppliers in store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SupplierServiceGRPC.PreferredSupplier> FindAllSuppliers(global::SupplierServiceGRPC.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindAllSuppliers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Shows all suppliers in store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SupplierServiceGRPC.PreferredSupplier> FindAllSuppliers(global::SupplierServiceGRPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FindAllSuppliers, null, options, request);
      }
      /// <summary>
      /// Shows all products in store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SupplierServiceGRPC.ProductRequest> FindAllProducts(global::SupplierServiceGRPC.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindAllProducts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Shows all products in store
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SupplierServiceGRPC.ProductRequest> FindAllProducts(global::SupplierServiceGRPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FindAllProducts, null, options, request);
      }
      /// <summary>
      /// Implementation of LIST(Suppliers) findAllPreferredSuppliers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SupplierServiceGRPC.PreferredSupplier> FindAllPreferredSuppliers(global::SupplierServiceGRPC.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindAllPreferredSuppliers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Implementation of LIST(Suppliers) findAllPreferredSuppliers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::SupplierServiceGRPC.PreferredSupplier> FindAllPreferredSuppliers(global::SupplierServiceGRPC.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_FindAllPreferredSuppliers, null, options, request);
      }
      /// <summary>
      /// Implementation of Supplier findPreferredSupplier(Product p)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.PreferredSupplier FindPreferredSupplier(global::SupplierServiceGRPC.ProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindPreferredSupplier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Implementation of Supplier findPreferredSupplier(Product p)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.PreferredSupplier FindPreferredSupplier(global::SupplierServiceGRPC.ProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindPreferredSupplier, null, options, request);
      }
      /// <summary>
      /// Implementation of Supplier findPreferredSupplier(Product p)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.PreferredSupplier> FindPreferredSupplierAsync(global::SupplierServiceGRPC.ProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindPreferredSupplierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Implementation of Supplier findPreferredSupplier(Product p)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.PreferredSupplier> FindPreferredSupplierAsync(global::SupplierServiceGRPC.ProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindPreferredSupplier, null, options, request);
      }
      /// <summary>
      /// Implementation of void setPreferredSupplierForProduct(Supplier s, Product c)
      ///	throws UnknownSupplierException, UnknownProductException
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.Empty setPreferredSupplierForProduct(global::SupplierServiceGRPC.setPreferredSupplierForProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setPreferredSupplierForProduct(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Implementation of void setPreferredSupplierForProduct(Supplier s, Product c)
      ///	throws UnknownSupplierException, UnknownProductException
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::SupplierServiceGRPC.Empty setPreferredSupplierForProduct(global::SupplierServiceGRPC.setPreferredSupplierForProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_setPreferredSupplierForProduct, null, options, request);
      }
      /// <summary>
      /// Implementation of void setPreferredSupplierForProduct(Supplier s, Product c)
      ///	throws UnknownSupplierException, UnknownProductException
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.Empty> setPreferredSupplierForProductAsync(global::SupplierServiceGRPC.setPreferredSupplierForProductRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return setPreferredSupplierForProductAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Implementation of void setPreferredSupplierForProduct(Supplier s, Product c)
      ///	throws UnknownSupplierException, UnknownProductException
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::SupplierServiceGRPC.Empty> setPreferredSupplierForProductAsync(global::SupplierServiceGRPC.setPreferredSupplierForProductRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_setPreferredSupplierForProduct, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GreeterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GreeterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GreeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SayHello, serviceImpl.SayHello)
          .AddMethod(__Method_SayHelloAgain, serviceImpl.SayHelloAgain)
          .AddMethod(__Method_FindAllSuppliers, serviceImpl.FindAllSuppliers)
          .AddMethod(__Method_FindAllProducts, serviceImpl.FindAllProducts)
          .AddMethod(__Method_FindAllPreferredSuppliers, serviceImpl.FindAllPreferredSuppliers)
          .AddMethod(__Method_FindPreferredSupplier, serviceImpl.FindPreferredSupplier)
          .AddMethod(__Method_setPreferredSupplierForProduct, serviceImpl.setPreferredSupplierForProduct).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GreeterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SayHello, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SupplierServiceGRPC.HelloRequest, global::SupplierServiceGRPC.HelloReply>(serviceImpl.SayHello));
      serviceBinder.AddMethod(__Method_SayHelloAgain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SupplierServiceGRPC.HelloRequest, global::SupplierServiceGRPC.HelloReply>(serviceImpl.SayHelloAgain));
      serviceBinder.AddMethod(__Method_FindAllSuppliers, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.PreferredSupplier>(serviceImpl.FindAllSuppliers));
      serviceBinder.AddMethod(__Method_FindAllProducts, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.ProductRequest>(serviceImpl.FindAllProducts));
      serviceBinder.AddMethod(__Method_FindAllPreferredSuppliers, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SupplierServiceGRPC.Empty, global::SupplierServiceGRPC.PreferredSupplier>(serviceImpl.FindAllPreferredSuppliers));
      serviceBinder.AddMethod(__Method_FindPreferredSupplier, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SupplierServiceGRPC.ProductRequest, global::SupplierServiceGRPC.PreferredSupplier>(serviceImpl.FindPreferredSupplier));
      serviceBinder.AddMethod(__Method_setPreferredSupplierForProduct, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SupplierServiceGRPC.setPreferredSupplierForProductRequest, global::SupplierServiceGRPC.Empty>(serviceImpl.setPreferredSupplierForProduct));
    }

  }
}
#endregion
